//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CETDBContext : DbContext
    {
        public CETDBContext()
            : base("name=CETDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Employee_Details> Employee_Details { get; set; }
        public virtual DbSet<User_Details> User_Details { get; set; }
    
        public virtual ObjectResult<GetAllEmployeesByCompany_Result> GetAllEmployeesByCompany(string empCName)
        {
            var empCNameParameter = empCName != null ?
                new ObjectParameter("empCName", empCName) :
                new ObjectParameter("empCName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployeesByCompany_Result>("GetAllEmployeesByCompany", empCNameParameter);
        }
    
        public virtual ObjectResult<GetAllEmployeesByName_Result> GetAllEmployeesByName(string empName)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("empName", empName) :
                new ObjectParameter("empName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployeesByName_Result>("GetAllEmployeesByName", empNameParameter);
        }
    
        public virtual ObjectResult<GetAllEmployeesBySkill_Result> GetAllEmployeesBySkill(string skillName)
        {
            var skillNameParameter = skillName != null ?
                new ObjectParameter("skillName", skillName) :
                new ObjectParameter("skillName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployeesBySkill_Result>("GetAllEmployeesBySkill", skillNameParameter);
        }
    }
}
